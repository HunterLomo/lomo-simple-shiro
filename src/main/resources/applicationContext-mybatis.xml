<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns = "http://www.springframework.org/schema/beans"
       xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop = "http://www.springframework.org/schema/aop"
       xmlns:tx = "http://www.springframework.org/schema/tx"
       xsi:schemaLocation = "http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

  <bean id = "propertyConfigurer"
        class = "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name = "locations" value = "classpath:jdbc.properties"/>
  </bean>

  <!-- druid configuration -->
  <bean name = "druidDataSource" class = "com.alibaba.druid.pool.DruidDataSource"
        init-method = "init" destroy-method = "close">
    <property name = "url" value = "${jdbc.url}"/>
    <property name = "username" value = "${jdbc.username}"/>
    <property name = "password" value = "${jdbc.password}"/>
    <property name = "initialSize" value = "0"/>
    <property name = "maxActive" value = "20"/>
    <property name = "minIdle" value = "0"/>
    <property name = "maxWait" value = "60000"/>
  </bean>

  <!-- mybatis文件配置，扫描所有mapper文件 -->
  <bean id = "myBatisSqlSessionFactory" class = "org.mybatis.spring.SqlSessionFactoryBean">
    <property name = "dataSource" ref = "druidDataSource"/>
    <property name = "mapperLocations">
      <array>
        <value>classpath:sql-mapper/*.xml</value>
      </array>
    </property>
    <!--<property name = "configLocation" value = "classpath:conf/mybatis-config.xml"></property>-->
  </bean>

  <!-- spring与mybatis整合配置，扫描所有dao，多个用逗号分隔 base-package=",,," -->
  <bean class = "org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name = "sqlSessionFactoryBeanName" value = "myBatisSqlSessionFactory"/>
    <property name = "basePackage" value = "com.lomo.dao"/>
    <property name = "annotationClass" value = "com.lomo.sys.MyBatisDao"/>
  </bean>

  <bean id = "transactionManager"
        class = "org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name = "dataSource" ref = "druidDataSource"/>
  </bean>

  <!-- 拦截配置 -->
  <tx:advice id = "txAdvice" transaction-manager = "transactionManager">
    <tx:attributes>
      <!--说明事务类别 -->
      <!-- find，query，list，search，get 开头的方法,开启只读,提高数据库访问性能 -->
      <tx:method name = "find*" propagation = "REQUIRED" read-only = "true"/>
      <tx:method name = "get*" propagation = "REQUIRED" read-only = "true"/>
      <tx:method name = "list*" propagation = "REQUIRED" read-only = "true"/>
      <tx:method name = "query*" propagation = "REQUIRED" read-only = "true"/>
      <tx:method name = "search*" propagation = "REQUIRED" read-only = "true"/>
      <!-- 对save，insert，update，delete 开头的方法进行事务管理,只要有异常就回滚 -->
      <tx:method name = "create*" propagation = "REQUIRED" rollback-for = "java.lang.Throwable"/>
      <tx:method name = "delete*" propagation = "REQUIRED" rollback-for = "java.lang.Throwable"/>
      <tx:method name = "do*" propagation = "REQUIRED" rollback-for = "java.lang.Throwable"/>
      <tx:method name = "insert*" propagation = "REQUIRED" rollback-for = "java.lang.Throwable"/>
      <tx:method name = "save*" propagation = "REQUIRED" rollback-for = "java.lang.Throwable"/>
      <tx:method name = "update*" propagation = "REQUIRED" rollback-for = "java.lang.Throwable"/>
      <!-- 对其他方法 使用默认的事务管理 -->
      <tx:method name = "*" propagation = "SUPPORTS"/>
    </tx:attributes>
  </tx:advice>

  <!-- 切入点 -->
  <aop:config expose-proxy = "true" proxy-target-class = "true">
    <!-- service层事务 -->
    <aop:advisor id = "serviceTx" advice-ref = "txAdvice"
                 pointcut = "execution(public * com.lomo.service.*.*(..))" order = "1"/>
  </aop:config>

  <tx:annotation-driven/>

</beans>
